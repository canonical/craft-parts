.. _craft_parts_bazel_plugin:

Bazel plugin
============

The **Bazel plugin** builds projects using the `Bazel build system <https://bazel.build>`_, through either ``bazel`` or ``bazelisk`` (searched in ``PATH``).

After a successful build, the plugin will:

* Invoke the chosen Bazel executable with the specified command, options, and targets;
* Expect Bazel to output any build artifacts in its default output directory (e.g., `bazel-bin/`);
* You must explicitly install/link outputs into the part’s install directory if required using `override-build:`, then it will store bazel-bin/ to $CRAFT_PART_INSTALL.

Keys
----

This plugin provides the following unique keys:

``bazel-command``
  **Type:** ``string``  
  **Default:** ``"build"``  
  The Bazel command to run.

  Accepted values:

  - ``build``
  - ``test``
  - ``run``

  (See Bazel build commands: https://bazel.build/run/build)

``bazel-options``
  **Type:** ``list of strings``  
  Additional flags passed directly to the Bazel command.

  Examples:

  .. code-block:: yaml

     bazel-options:
       - --config=release
       - --jobs=4
       - --verbose_failures

  (See Bazel options: https://bazel.build/docs/user-manual#commands-and-options)

``bazel-targets``
  **Type:** ``list of strings``  
  **Default:** ``["//..."]``  
  Targets to pass to Bazel. Specify one or more to control which parts of the project Bazel builds.

  Examples:

  .. code-block:: yaml

     bazel-targets:
       - //src:my_app
       - //lib:core

  (See Bazel target syntax: https://bazel.build/docs/user-manual#target-syntax)

Environment variables
---------------------

If the following variables are set in the user's environment during a build, this plugin will automatically propagate them to the Bazel build using Bazel’s ``--action_env=`` support:

- ``http_proxy``
- ``https_proxy``
- ``no_proxy``

This ensures compatibility with proxy-aware build systems and mirrors.

Example
-------

Below is a complete example of a ``parts.yaml`` snippet for a part using the Bazel plugin:

.. code-block:: yaml

   parts:
     my-part:
       plugin: bazel
       source: .
       bazel-command: build
       bazel-options:
         - --config=debug
         - --verbose_failures
       bazel-targets:
         - //app:server
         - //lib:utils
       build-environment:
         - HTTP_PROXY: http://proxy.example.com:8080
         - HTTPS_PROXY: https://proxy.example.com:8443
         - no_proxy: localhost,127.0.0.1

Notes
-----

- By default, artifacts generated by Bazel (in `bazel-bin/`) are **not automatically staged or installed** into the snap. You must use `override-build` and install them manually if needed:

  .. code-block:: yaml

     override-build: |
       craftctl default
       install -D bazel-bin/app/server "$CRAFT_PART_INSTALL/usr/bin/server"

- The plugin will fail early if **neither** ``bazel`` nor ``bazelisk`` is found in ``PATH``.

- Startup options such as ``--output_base`` or ``JVM args`` are **not currently supported** via a separate key (e.g., bazel-startup-options), though this may be supported in future versions via an additional key.

For full documentation on Bazel commands and features, see:  
https://bazel.build/docs

